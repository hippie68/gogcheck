#!/bin/bash

# This script tests GOG .exe and .bin files for authenticity and file integrity.
# It can run 3 checks: digital signature verification, .bin checksum verification,
# and Inno Setup checksum verification (testing the actual game files).
# The goal is to ensure game files haven't been tempered with by a 3rd party.
#
# The following programs are required:
#   - osslsigncode (e.g. https://github.com/mtrojnar/osslsigncode)
#   - innoextract (https://constexpr.org/innoextract/)
#
# Optional:
#   - unrar/unar to test-extract RAR archives
#
# If errors have been encountered, the scripts exits with exit code 1.
#
# This script is considered work-in-progress and expected to have bugs.
# Please report any issues at https://github.com/hippie68/gogcheck

# USER VARIABLES: #############################################################

enable_colors=true
compactmode=false

# You might need to specify a Certificate Authority (CA) file for osslsigncode.
# On Debian/Ubuntu/WSL: "/etc/ssl/certs/ca-certificates.crt"
# For Git Bash: "/etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt"
#certfile=

# Optionally specify the required programs' locations here:
#osslsigncode_binary=
#innoextract_binary=
#unrar_directory=

# The variables "subjects", "issuers", and "serials" are optional lists
# of known/trusted strings, which then appear colored in the signature verification.
# For "subjects" and "serials", first block is GOG, then DigiCert each.
# It is not a complete collection, and future game releases might come with new strings.
# Use this section to include additional strings seen in your known-legit files.

subjects="
/C=PL/L=Warsaw/O=GOG Sp. z o.o./CN=GOG Sp. z o.o.
/C=PL/L=Warszawa/O=GOG Sp. z o.o./CN=GOG Sp. z o.o.
/C=CY/L=Larnaca/O=GOG Limited/CN=GOG Limited
/C=CY/L=Nicosia/O=GOG Limited/CN=GOG Limited
/C=PL/ST=Mazowieckie/L=Warszawa/O=GOG Sp. z o.o./CN=GOG Sp. z o.o.
/C=PL/ST=MAZOWIECKIE/L=WARSZAWA/O=GOG  sp. z o.o/CN=GOG  sp. z o.o

/C=US/O=DigiCert/CN=DigiCert Timestamp Responder
/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Assured ID Code Signing CA-1
/C=US/O=DigiCert, Inc./CN=DigiCert Timestamp 2021
/C=US/O=DigiCert/CN=DigiCert Timestamp 2022 - 2
"

issuers="
/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert SHA2 Assured ID Code Signing CA
/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Assured ID Root CA
/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Assured ID CA-1
/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert SHA2 Assured ID Timestamping CA
/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Trusted Root G4
/C=US/O=DigiCert, Inc./CN=DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1
/C=US/O=DigiCert, Inc./CN=DigiCert Trusted G4 RSA4096 SHA256 TimeStamping CA
"

serials="
06F56DD38538018E9A31248796E640AB
0B2CE86937CD32092D0C003EFDF5D988
0CB6E45E4D9295AFD0DEA595E0156ACE
0DB093590538192F52B39C94119A48CB
05B5D9D6BB2960FBD330C5D6B9B7B7D2
087DE552D352D9BAF0C2B6DF6AC4C64A
096DCF2E35C66F13EF95FCC8BFAC3E11
0B17A63F5D10CB7D3B78AF8F676C7667
0B976DD3814E722F750A35F3BC91BFA0

0409181B5FD5BB66755343B56F955008
03019A023AFF58B16BD6D5EAE617F066
06FDF9039603ADEA000AEB3F27BBBA1B
038B96F070D9E21E55A5426792E1C83A
0FA8490615D700A0BE2176FDC5EC6DBD
039FEDEDCB795B8DED320C8919F03689
0D424AE0BE3A88FF604021CE1400F0DD
0AA125D6D6321B7E41E405DA3697C215
0E9B188EF9D02DE7EFDB50E20840185A
073637B724547CD847ACFD28662A5E5B
08AD40B260D29C4C9F5ECDA9BD93AED9
0C4D69724B94FA3C2A4A3D2907803D5A
"

set_colors() {
  color_success='\033[92m' # Bright green
  color_error='\033[91m' # Bright red
  color_known='\033[32m' # Green
  color_unknown='\033[33m' # Yellow
  color_file='\033[1;95m' # Bold bright purple
  color_check='\033[95m' # Bright purple
  color_reset='\033[0;39m'
  color_debug1='\033[1;96m' # Bold cyan
  color_debug2='\033[96m' # Cyan
}

# INITIALIZATION: #############################################################

# "okstrings" and "errorstrings" are used to highlight osslsigncode's results
okstrings='Signature verification: ok|Timestamp Server Signature verification: ok'
errorstrings='MISMATCH!!!!|MISMATCH!!!|MISMATCH|failed|Failed|No signature found'

rarcount=0 # Global number of RAR archives encountered by innocheck()
rarfiles="" # List of .bin files that are identified as RAR archives
errorcount=0 # Global count of errors or unexpected results
errorfiles="" # List of files that produced errors
checkcount=0 # Each .exe file gets a unique number - used for tracking errors faster
exeprefix='setup_' # Overridden by command line option -F
maxdepth='-maxdepth 1' # Standard value for main loop's "find" command, unless -r set
unraroption='--gog' # Enables RAR test-extracting

usage() {
  echo "Usage: ${0//*\/} [options] [file/directory ...]

Checks your GOG offline installer collection for valid digital signatures and correct checksums, making sure the files are legit and have not been tempered with.
If no files or directories are specified, the current directory will be used.
If neither the -s, -b/-B, nor -i/-I option is used, all checks will be run.

The checks consist of 3 parts:
  1. Digital signature verification for .exe files
  2. File checksum verification for .bin files
  3. Inno Setup file checksum verification (actual game files packed inside .exe and .bin files)

Options:
  -b  Enable binary check
  -B  Same as -b, but disable checksum calculation
  -c  Compact mode: all output but filenames and results is suppressed
  -1  Same as -c
  -C  Disable colors
  -f  Force checks on all .exe files (not just setup_*.exe)
  -h  Display this help
  -i  Enable innoextract check
  -I  Same as -i, but disable test-extracting
  -r  Traverse directories recursively
  -R  Disable RAR test-extracting
  -s  Enable signature check
  -S  Silent mode: all output is suppressed; only the 1st .exe file is checked
      (Used for exit code checks)
  --  Anything following this is considered a file/directory
"
  exit 0
}

# Parsing command line arguments
while [[ $1 == "-"* && ${#1} -gt 1 ]]; do
  if [[ $1 == "--" ]]; then shift; break; fi
  for ((i=1;i<${#1};i++)); do
    case ${1:i:1} in
      b) check_binaries=true ;;
      B) check_binaries=true; disable_binchecksumcalculation=true ;;
      c|1) compactmode=true ;;
      C) unset enable_colors ;;
      D) debug=true ;;
      f|F) unset exeprefix ;;
      h) usage ;;
      i) check_innosetup=true ;;
      I) check_innosetup=true; disable_extracting=true ;;
      r) unset maxdepth ;;
      R) unset unraroption ;;
      s) check_signatures=true ;;
      S) silentmode=true; exec &> /dev/null ;;
      *) echo "${0//*\/}: invalid option: '${1:i:1}'"; usage ;;
    esac
  done
  shift
done

# If no arguments have been given, use current directory
[[ $1 == "" ]] && set -- .

# If no check has been enabled, enable all checks
if [[ $check_signatures$check_binaries$check_innosetup == "" ]]; then
  check_signatures=true check_binaries=true check_innosetup=true
fi

# Set program locations
if [[ $check_signatures == true ]]; then
  [[ ! $osslsigncode_binary ]] && osslsigncode_binary=osslsigncode
  if ! hash "$osslsigncode_binary" &> /dev/null; then
    echo "osslsigncode binary not found! Which is required to verify .exe signatures."
    echo "Download the latest version from https://github.com/mtrojnar/osslsigncode."
    exit 1
  fi
fi
if [[ $check_innosetup == true ]]; then
  [[ ! $innoextract_binary ]] && innoextract_binary=innoextract
  if ! hash "$innoextract_binary" &> /dev/null; then
    echo "innoextract binary not found! Which is required to verify checksums of compressed files inside .exe and .bin files."
    echo "Download the latest version from https://constexpr.org/innoextract."
    exit 1
  fi
fi
[[ $unrar_directory ]] && PATH="$unrar_directory:$PATH"

# Check for "file" command
if ! file -v &> /dev/null; then
  echo "The \"file\" command is not available on this system. RAR files cannot be detected and will produce errors during the innoextract check."
else
  file_command_available=1
fi

# Disable RAR extraction if rar/unar not available
if [[ ! -z ${unraroption+x} && $check_innosetup == true && ! $disable_extracting == true ]] \
  && ! hash unrar &> /dev/null && ! hash unar &> /dev/null; then
  unset unraroption
  echo "unrar/unar binary not found - RAR extraction has been disabled."
  echo "Download the latest UnRAR version from https://www.rarlab.com/rar_add.htm."
fi

# Set osslsigncode options
osslsigncode_version=$("$osslsigncode_binary" -v 2> /dev/null \
  | grep -Po 'osslsigncode \K[^,]*(?=,)')
osslsigncode_version=${osslsigncode_version//./}
if [[ ${#osslsigncode_version} -eq 2 ]]; then
  osslsigncode_version+=0
fi
if [[ $certfile && $osslsigncode_version -ge 210 ]]; then
  osslsigncode_options="-CAfile $certfile -untrusted $certfile"
  # Note: future versions will have changed "-untrusted" to "-TSA-CAfile", but
  # still keep the old name for compatibility.
fi

# Enable colors
[[ $enable_colors == true ]] && set_colors

# Escapes all regex metacharacters in user strings for internal regex use, and
# creates "|"-delimited strings
prepare_user_strings() {
  IFS=$'\n'
  for string in $1; do
    for char in \[ \] \( \) \. \^ \$ \? \* \+ \|; do
      string=${string//"$char"/"\\$char"}
    done
    result+="$string|"
  done
  echo "${result%|}"
}
subjects=$(prepare_user_strings "$subjects")
issuers=$(prepare_user_strings "$issuers")
serials=$(prepare_user_strings "$serials")

# FUNCTIONS: ##################################################################

debugmessage() {
  if [[ $debug == true ]]; then
    echo -e "${color_debug1}DEBUG MESSAGE: ${color_debug2}$1${color_reset}"
  fi
}

# Used for logging errors; argument format: "filename" "reason"
error() { ((errorcount++)); errorfiles+="[$checkcount] $1 ($2)"$'\n'; }

sigcheck() {
  echo -e "${color_check}Running signature check...${color_reset}"
  local osslsigncode_output
  osslsigncode_output=$("$osslsigncode_binary" verify $osslsigncode_options "$1" 2>&1)
  returncode=$?

  # Adjust osslsigncode's output
  if [[ $compactmode != true ]]; then
    while read -r line; do # read without "IFS=" removes ossligncode's tabs
      # Mark known/unknown strings
      if [[ $line  == +(Subject:|Issuer :|Serial :)* ]]; then
        if [[ ${line#*: } == +($subjects|$issuers|$serials) ]]; then
          echo -e "${line%%:*}:${color_known}${line#*:}${color_reset}"
        else
          echo -e "${line%%:*}:${color_unknown}${line#*:}${color_reset}"
        fi
      # Mark errors
      elif [[ $line =~ .*($errorstrings) ]]; then
        echo -e "${color_error}$line${color_reset}"
      # Mark success
      elif [[ $line == +($okstrings) ]]; then
        echo -e "${line:0:-2}${color_success}OK${color_reset}"
      # Remove osslsigncode clutter
      elif [[ $line == !(''|------------------|Succeeded|Succeeded.) \
        && $line != +(Certificate expiration date:|notBefore|notAfter|CAfile:|TSA\'s certificates file|CRL distribution point|TSA\'s CRL distribution point:)* ]];
      then
        echo "$line"
      fi
    done < <(echo "$osslsigncode_output")
  fi

  # Error handling
  # osslsigncode 2.0.0 and older: "No signature found."
  # osslsigncode 2.1.0: "No signature found"
  # Note: osslsigncode 2.0.0 and older exit with 0 even when no signature found
  if [[ $osslsigncode_output == *"No signature found"* ]]; then
    error "$1" "no digital signature found"
  elif [[ $returncode != 0 ]]; then
    error "$1" "digital signature error"
  fi
}

bincheck() {
  echo -e "${color_check}Running binary check...${color_reset}"
  local crcstring
  crcstring=$(tac "$1" | grep -a -m 1 -i -o '[[:alnum:]]*#GOGCRCSTRING')
  debugmessage "Raw GOGCRCSTRING: $crcstring"

  # Leave if no checksums found
  if [[ $crcstring == "" ]]; then
    echo -e "No .bin file checksums found."
    if compgen -G "${1%.exe}-*.bin" > /dev/null; then
      echo "However, matching .bin file(s) exist:"
      for i in "${1%.exe}"-*.bin; do echo "  $i"; done
      echo -e "${color_error}Without checksums, cannot verify the .bin file(s)!${color_reset}"
      error "$1" ".bin checksums missing"
    else
      echo "No matching .bin files found either."
      echo -e "${color_error}Is this .exe a GOG installer?${color_reset}"
      error "$1" "not a GOG installer?"
    fi
    return
  fi

  crcstring=${crcstring%#GOGCRCSTRING*} # Remove the string name, leaving numbers
  local multiplier=$((10#${crcstring: -2})) # The 2-digit number before '#GOGCRCSTRING'

  # Leave if installer expects 0 .bin files
  if [[ $multiplier -eq 0 ]]; then
    echo "Installer claims not to have .bin files."
    if compgen -G "${1%.exe}-*.bin" > /dev/null; then
      echo -e "${color_unknown}However, matching .bin file(s) exist:${color_reset}"
      for i in "${1%.exe}"-*.bin; do echo "  $i"; done
      error "$1" ".bin files exist that shouldn't"
    else
      echo "No matching .bin files found."
    fi
    return
  fi

  crcstring=${crcstring::-2} # Remove the 2-digit number
  local md5hashes=${crcstring:(( - $multiplier * 32 ))} # Omit characters not part of the hashes
  md5hashes=${md5hashes,,} # Set md5 hashes to lowercase
  debugmessage "Raw MD5 hashes: $md5hashes"
  echo -n "Found $multiplier checksum"
  if [[ $multiplier -eq 1 ]]; then echo ":"; else echo "s:"; fi

  # Get the checksums
  local checksum checksums
  for i in $(seq 1 $multiplier); do
    checksum=${md5hashes:(( 32 * (($i - 1)) )):32}
    [[ $checksum == "" ]] && checksum="[empty]                         "
    echo "$checksum"
    checksums+="$checksum " # Add current checksum to known checksums
  done

  # Compare the checksums
  local -i bincount=0
  if [[ $disable_binchecksumcalculation != true ]]; then
    if [[ $multiplier -eq 1 ]]; then
       echo "Verifying checksum..."
    else
       echo "Verifying checksums..."
    fi
  fi
  for bin in "${1%.exe}"-*.bin; do
    ((bincount++))
    if [[ $disable_binchecksumcalculation != true ]]; then
      echo "${bin##*/}: "
      checksum=$(md5sum "$bin")
      if [[ $? -ne 0 ]]; then
        continue
      fi
      checksum=${checksum%% *}
      echo -n "$checksum: "
      if [[ $checksums == *"$checksum"* ]]; then
        echo -e "${color_success}OK${color_reset}"
      else
        echo -e "${color_error}Error${color_reset}"
        error "${bin##*/}" "wrong checksum"
      fi
    else echo "Found .bin file: ${bin##*/}"
    fi
  done

  # Throw an error when the numbers of checksums and .bin files differ
  if [[ ! $multiplier -eq $bincount ]]; then
    echo -e "${color_error}Warning: $multiplier .bin files expected, but $bincount found.${color_reset}"
    error "$1" "wrong number of .bin files"
  fi
}

innocheck() {
  echo -e "${color_check}Running innoextract check...${color_reset}"

  # Abort if .exe is not an Inno Setup installer
  if ! "$innoextract_binary" --info "$1" > /dev/null; then
    echo -e "${color_error}innoextract reported errors while probing the file.${color_reset}"
    error "$1" "innoextract file probing"
    return
  fi

  # Display archive's filesize and checksum summary
  local -i filesize=0 filecount=0 sha1count=0 md5count=0
  while read -r -a array; do
    # 0: file size, 1: checksum type, 2: checksum, 3: file name
    if [[ ${array[0]} == +([[:digit:]]) ]]; then
      ((filesize+=array[0]))
      ((filecount++))
    fi
    case ${array[1]} in
      SHA-1) ((sha1count++));;
      MD5) ((md5count++));;
    esac
  done < <("$innoextract_binary" --list-sizes --list-checksums --silent "$1" 2> /dev/null)
  filesize=$((100*filesize/1024/1024))
  echo "$filecount files (${filesize%??}.${filesize: -2} MiB)" # Floating-point hack
  echo "$((sha1count + md5count)) checksums ($sha1count SHA-1, $md5count MD5)"
  if [[ ! $filecount -eq $((sha1count + md5count)) ]]; then
    echo "${color_error}Warning: Numbers of files and checksums differ.${color_reset}"
    error "$1" "innoextract checksum info"
  fi

  # Detect RAR archives
  if [[ $file_command_available && -f "${1%.exe}"-1.bin ]]; then
    if [[ $(file "${1%.exe}"-1.bin) == *RAR* ]]; then
      echo -e "${color_unknown}RAR format detected.${color_reset} Innoextract does not know .bin contents' checksums."
      if [[ $disable_extracting != true && $unraroption != '--gog' ]]; then
        echo "RAR extraction (--gog option) is disabled."
      fi
      ((rarcount++))
      rarfiles+="$1"$'\n'
    fi
  fi

  # Test-extract Inno Setup archive
  if [[ $disable_extracting != true ]]; then
    echo "Test-extracting files..."
    if ! "$innoextract_binary" $unraroption --test --silent --progress=1 "$1"; then
      echo -e "${color_error}innoextract reported errors.${color_reset}"
      error "$1" "innoextract extraction"
      return
    else
      echo -e "Extraction successful."
    fi
  fi
}

scriptresult() {
  [[ $checkcount -eq 0 ]] && exit 1
  if [[ $checkcount -eq 1 ]]; then
    echo -n "1 file checked, "
  else
    echo -n "$checkcount files checked, "
  fi
  if [[ $errorcount -eq 0 ]]; then
    echo -en "${color_success}"
  else
    echo -en "${color_error}"
  fi
  if [[ $errorcount -eq 1 ]]; then
    echo -e "1 error${color_reset}"
  else
    echo -e "$errorcount errors${color_reset}"
  fi
  echo
  if [[ $rarcount -gt 0 ]]; then
    if [[ $unraroption == "" ]]; then
      echo "Files with (untested) RAR archive .bin files:"
    else
      echo "Files with RAR archive .bin files:"
    fi
    echo "$rarfiles"
  fi
  if [[ $errorcount -gt 0 ]]; then
    echo "Files that produced errors:"
    echo -e "${color_error}$errorfiles${color_reset}"
    exit 1
  fi
  exit 0
}

# Catch CTRL-C commands
trap '{ [[ $compactmode == true ]] && { exec 1>&3; exec 2>&4; }
  echo " Script aborted."; echo; scriptresult; }' SIGINT

gogcheck() {
  local error="$errorcount" # Used in compact mode, see bottom

  # Display currently checked .exe file
  ((checkcount++))
  if [[ $compactmode == true ]]; then
    echo -en "[$checkcount] ${1} "
    exec 3>&1; exec 4>&2 # Save file descriptors 1 and 2 for later
    exec &> /dev/null # Disable output in compact mode
  else
    echo -e "[$checkcount] ${color_file}$1${color_reset}"
  fi

  # Run main checks on .exe file
  [[ $check_signatures == true ]] && sigcheck "$1"
  [[ $check_binaries == true ]] && bincheck "$1"
  [[ $check_innosetup == true ]] && innocheck "$1"

  # Make sure only 1 .exe file in total is checked in silent mode
  [[ $silentmode == true ]] && scriptresult

  # Display compact mode result
  if [[ $compactmode == true ]]; then
    exec 1>&3; exec 2>&4 # Re-enable output in compact mode
    if [[ $error -lt $errorcount ]]; then
      echo -en "${color_error}Error${color_reset}"
    else
      echo -en "${color_success}OK${color_reset}"
    fi
  fi

  echo
}

# MAIN LOOP: ##################################################################

shopt -s nocasematch
while [[ $1 != "" ]]; do
  if [[ -d "$1" ]]; then
    while IFS= read -r -d $'\0' exe; do
      gogcheck "$exe"
    done < <(find "$1" $maxdepth -iname "$exeprefix*.exe" -type f -print0 \
      | sort -z)
  elif [[ -f "$1" ]] && [[ ${1##*/} == "$exeprefix"*.exe ]]; then
    gogcheck "$1"
  fi
  shift
done

[[ $compactmode == true ]] && echo

scriptresult
