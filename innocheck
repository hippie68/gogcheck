#!/bin/bash

# User variables

silent=true

color_error='\e[91m'
color_success='\e[92m'
color_file='\e[95m'
color_reset='\e[39m'

# Script starts below

filecount=0
errorcount=0
errorfiles=""
if [[ $silent == true ]]; then
  silent="--silent"
else
  silent=""
fi

[[ "$1" == "" ]] && set -- . # if no arguments given, use current directory

inno() {
  innoerror=false
  ((filecount++))
  echo -e "Testing ${color_file}$1${color_reset}"

  # show info why RAR archives are skipped
  if [[ -f "${1%.exe}"-1.bin ]]; then
    if [[ $(file "${1%.exe}"-1.bin) == *RAR* ]]; then
      echo "The bin file(s) for this particular game are in RAR format and not part of Inno Setup. The content's checksums are not known. You can ignore the following innoextract warnings."
    fi
  fi

  innoextract --test $silent --progress=1 "$1"
  if [[ "$?" != "0" ]]; then
    ((errorcount++))
    errorfiles+="$1
"
    echo -e "  ${color_error}Encountered errors${color_reset}."
  fi
}

while [[ "$1" != "" ]]; do
  [[ -d "$1" ]] && for exe in "$1"/*.exe; do [[ -f "$exe" ]] && inno "$exe"; done
  [[ -f "$1" ]] && inno "$1"
  shift
done

echo
echo -n "$filecount exe file(s), "
if [[ $errorcount == 0 ]]; then 
  echo -en "${color_success}"
else
  echo -en "${color_error}"
fi
echo -e "$errorcount error(s)${color_reset}"
if [[ $errorcount -gt 0 ]]; then
  echo "Listing files that produced errors:"
  echo -e "${color_error}$errorfiles${color_reset}"
fi
exit "$errorcount"
